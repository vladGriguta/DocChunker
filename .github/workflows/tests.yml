name: Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install reportlab  # For PDF generation in tests
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=docchunker --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Check code formatting with Black
      run: black --check docchunker tests
    
    - name: Check import sorting with isort
      run: isort --check-only docchunker tests
    
    - name: Run ruff linter
      run: ruff check docchunker tests
    
    - name: Run mypy type checker
      run: mypy docchunker --ignore-missing-imports

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: |
        pip install twine
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
    
    - name: Create test data directory
      run: mkdir -p data/samples
    
    - name: Create sample document for testing
      run: |
        python -c "
from docx import Document
doc = Document()
doc.add_heading('Complex Test Document', 0)
doc.add_heading('Introduction', 1)
doc.add_paragraph('This is a test document for DocChunker integration testing.')
doc.add_paragraph('First item', style='List Bullet')
doc.add_paragraph('Second item', style='List Bullet')
doc.add_paragraph('Third item', style='List Bullet')
table = doc.add_table(rows=3, cols=3)
table.style = 'Light Grid Accent 1'
table.cell(0,0).text = 'Header 1'
table.cell(0,1).text = 'Header 2'
table.cell(0,2).text = 'Header 3'
table.cell(1,0).text = 'Data 1'
table.cell(1,1).text = 'Data 2'
table.cell(1,2).text = 'Data 3'
table.cell(2,0).text = 'Data 4'
table.cell(2,1).text = 'Data 5'
table.cell(2,2).text = 'Data 6'
doc.save('data/samples/complex_document.docx')
"
    
    - name: Run integration test
      run: |
        # Check if basic_usage.py exists and can import docchunker
        if [ -f "examples/basic_usage.py" ]; then
          python examples/basic_usage.py
        else
          # Simple integration test
          python -c "
from docchunker import DocChunker
chunker = DocChunker()
chunks = chunker.process_document('data/samples/complex_document.docx')
print(f'Successfully processed document into {len(chunks)} chunks')
assert len(chunks) > 0, 'No chunks generated'
"
        fi
    
    - name: Check output
      run: |
        # Check if output was created (only if basic_usage.py was run)
        if [ -f "data/output/chunks.json" ]; then
          echo "Integration test passed - chunks.json created"
          head -n 50 data/output/chunks.json
        else
          echo "Note: chunks.json not created (this is OK if basic_usage.py doesn't exist yet)"
        fi